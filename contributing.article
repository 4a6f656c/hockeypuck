Hockeypuck
OpenPGP Public Keyserver
20:00 3 May 2015

Casey Marshall
https://hockeypuck.github.io/

* Contributing

** Where to contribute

Hockeypuck has been split into several Go package projects.

In general, all Hockeypuck projects are maintained under the
[[https://github.com/hockeypuck][hockeypuck]] organization, in the following
Github projects:

*** Hockeypuck Packages

Hockeypuck is composed of several small Go packages, each of which attempt to do one thing well.

- [[https://gopkg.in/hockeypuck/conflux.v2][conflux]] Reconciliation protocol used for peering.
- [[https://gopkg.in/hockeypuck/hkp.v1][hkp]] HKP protocol handler.
- [[https://gopkg.in/hockeypuck/mgohkp.v1][mgohkp]] MongoDB storage driver.
- [[https://gopkg.in/hockeypuck/openpgp.v1][openpgp]] OpenPGP public key data model & processing. 
- [[https://gopkg.in/hockeypuck/pghkp.v1][pghkp]] PostgreSQL JSONB storage driver.

*** Hockeypuck Server

The Hockeypuck server at [[https://github.com/hockeypuck/server]] integrates the
above packages with a server configuration model, logging, server and
maintenance utility binaries.

*** Hockeypuck Front-End

[[https://github.com/hockeypuck/webroot]] is a fork of Matt Rude's
[[https://github.com/mattrude/pgpkeyserver-lite][pgpkeyserver-lite]] front end.
It's included in the Hockeypuck release for convenience.

*** Hockeypuck Packaging

[[https://github.com/hockeypuck/packaging]] is a collection of release management
scripts. These scripts fetch the above Hockeypuck source packages and all their
dependencies at known compatible and working versions. Debian packaging as well
as cross-compiled tarballs are supported for release distribution.

*** Hockeypuck documentation

[[https://github.com/hockeypuck/hockeypuck]] used to be the entire
Hockeypuck source tree, but since splitting up into separate package
projects, it is used primarily for project documentation.

*** Hockeypuck testing

[[https://github.com/hockeypuck/testing]] contains testdata used by some of the
other projects, such as OpenPGP key material examples used in
[[https://gopkg.in/hockeypuck/openpgp][openpgp]] test cases. It also contains
[[http://docs.ansible.com/][Ansible]] playbooks used to coordinate integration
tests. These might be a useful starting point for an Ansible-based deployment
of Hockeypuck.

** Tools

*** gopkg

[[https://gopkg.in]] is used to version Hockeypuck APIs. This is a distinct concern
from dependency revision management. Versioned APIs provide certain guarantees
with regard to compatibility.

*** godeps

The [[https://github.com/hockeypuck/server][server]] releases use
[[https://launchpad.net/godeps][godeps]] for managing
[[https://github.com/hockeypuck/server/blob/master/dependencies.tsv][package dependencies]].
I've tried several other dependency management solutions for Go
packages, and I find godeps to be simple, easy to work with and
well-maintained.

*** Travis CI

Many of the Hockeypuck projects use [[https://travis-ci.org/hockeypuck][Travis CI]] to build and test the projects on
commit. I've found Travis to be more useful than not for small, simple projects
with short tests. Which is really where you want to be. It's also nice to test
on many versions of Go, which is something I would not bother to do on every
commit otherwise.

** Pull request guidelines

Github pull requests will be reviewed on merit of relevance to the project
goals. Significant feature development should be discussed first on the
[[https://groups.google.com/forum/#!forum/hockeypuck-devel][mailing list]].

In code reviews, I'll look & ask for:

- Correctness. Does it do what it claims to?
- Succinct and appropriate naming.
- General Go style ([[https://golang.org/doc/effective_go.html][Effective Go]], etc.) and codebase fit. When in doubt, ask.
- Godoc comments on public symbols (an area I'd like to improve)
- Adequate test coverage (ditto)

